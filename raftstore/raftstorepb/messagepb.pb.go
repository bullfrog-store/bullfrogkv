// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messagepb.proto

package raftstorepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import raftpb "go.etcd.io/etcd/raft/v3/raftpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RaftMessage struct {
	Message              *raftpb.Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	FromPeer             uint64          `protobuf:"varint,2,opt,name=from_peer,json=fromPeer" json:"from_peer,omitempty"`
	ToPeer               uint64          `protobuf:"varint,3,opt,name=to_peer,json=toPeer" json:"to_peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RaftMessage) Reset()         { *m = RaftMessage{} }
func (m *RaftMessage) String() string { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()    {}
func (*RaftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_messagepb_c9cec67e2592ca90, []int{0}
}
func (m *RaftMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftMessage.Unmarshal(m, b)
}
func (m *RaftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftMessage.Marshal(b, m, deterministic)
}
func (dst *RaftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessage.Merge(dst, src)
}
func (m *RaftMessage) XXX_Size() int {
	return xxx_messageInfo_RaftMessage.Size(m)
}
func (m *RaftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessage proto.InternalMessageInfo

func (m *RaftMessage) GetMessage() *raftpb.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RaftMessage) GetFromPeer() uint64 {
	if m != nil {
		return m.FromPeer
	}
	return 0
}

func (m *RaftMessage) GetToPeer() uint64 {
	if m != nil {
		return m.ToPeer
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_messagepb_c9cec67e2592ca90, []int{1}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RaftMessage)(nil), "raftstorepb.RaftMessage")
	proto.RegisterType((*Empty)(nil), "raftstorepb.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Message service

type MessageClient interface {
	// peer to peer
	SendRaftMessage(ctx context.Context, opts ...grpc.CallOption) (Message_SendRaftMessageClient, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) SendRaftMessage(ctx context.Context, opts ...grpc.CallOption) (Message_SendRaftMessageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Message_serviceDesc.Streams[0], c.cc, "/raftstorepb.Message/SendRaftMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSendRaftMessageClient{stream}
	return x, nil
}

type Message_SendRaftMessageClient interface {
	Send(*RaftMessage) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type messageSendRaftMessageClient struct {
	grpc.ClientStream
}

func (x *messageSendRaftMessageClient) Send(m *RaftMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSendRaftMessageClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Message service

type MessageServer interface {
	// peer to peer
	SendRaftMessage(Message_SendRaftMessageServer) error
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_SendRaftMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServer).SendRaftMessage(&messageSendRaftMessageServer{stream})
}

type Message_SendRaftMessageServer interface {
	SendAndClose(*Empty) error
	Recv() (*RaftMessage, error)
	grpc.ServerStream
}

type messageSendRaftMessageServer struct {
	grpc.ServerStream
}

func (x *messageSendRaftMessageServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSendRaftMessageServer) Recv() (*RaftMessage, error) {
	m := new(RaftMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raftstorepb.Message",
	HandlerType: (*MessageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendRaftMessage",
			Handler:       _Message_SendRaftMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messagepb.proto",
}

func init() { proto.RegisterFile("messagepb.proto", fileDescriptor_messagepb_c9cec67e2592ca90) }

var fileDescriptor_messagepb_c9cec67e2592ca90 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xcd, 0x6a, 0x87, 0x30,
	0x10, 0xc4, 0x9b, 0x7e, 0xfc, 0xd3, 0xae, 0x07, 0x21, 0x97, 0x8a, 0xbd, 0x88, 0x27, 0xbd, 0x44,
	0xd0, 0x47, 0x28, 0x3d, 0xb6, 0x14, 0xfb, 0x00, 0xc5, 0xd4, 0x55, 0x7a, 0xd0, 0x0d, 0x71, 0x29,
	0xf4, 0xed, 0x4b, 0x12, 0x05, 0x7b, 0x1a, 0xd8, 0xdf, 0xce, 0xec, 0x0e, 0xa4, 0x0b, 0x6e, 0xdb,
	0x30, 0xa3, 0x35, 0xda, 0x3a, 0x62, 0x52, 0x89, 0x1b, 0x26, 0xde, 0x98, 0x1c, 0x5a, 0x93, 0xd7,
	0x33, 0x69, 0xe4, 0xaf, 0x51, 0x7f, 0x53, 0xe3, 0xb5, 0xf1, 0xb0, 0xf9, 0xe9, 0x82, 0x5a, 0x13,
	0x24, 0xfa, 0xca, 0x15, 0x92, 0x7e, 0x98, 0xf8, 0x35, 0xc6, 0xa9, 0x1a, 0xe4, 0x9e, 0x9c, 0x89,
	0x42, 0x54, 0x49, 0x9b, 0xea, 0xe8, 0xd1, 0xfb, 0x46, 0x7f, 0x70, 0xf5, 0x04, 0x0f, 0x93, 0xa3,
	0xe5, 0xd3, 0x22, 0xba, 0xec, 0xba, 0x10, 0xd5, 0x6d, 0x7f, 0xef, 0x07, 0xef, 0x88, 0x4e, 0x3d,
	0x82, 0x64, 0x8a, 0xe8, 0x26, 0xa0, 0x0b, 0x93, 0x07, 0xa5, 0x84, 0xbb, 0x97, 0xc5, 0xf2, 0x6f,
	0xfb, 0x06, 0xf2, 0x38, 0xfa, 0x0c, 0xe9, 0x07, 0xae, 0xe3, 0xf9, 0x8f, 0x4c, 0x9f, 0xfa, 0xe8,
	0x13, 0xc9, 0xd5, 0x3f, 0x12, 0xb2, 0xca, 0xab, 0x4a, 0x98, 0x4b, 0xe8, 0xd3, 0xfd, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xa5, 0xcc, 0xb2, 0xd9, 0x1a, 0x01, 0x00, 0x00,
}
